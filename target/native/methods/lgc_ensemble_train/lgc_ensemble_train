#!/usr/bin/env bash

# lgc_ensemble_train 1.0.0
# 
# This wrapper script is auto-generated by viash 0.8.6 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.
# 
# The component may contain files which fall under a different license. The
# authors of this component should specify the license in the header of such
# files, or include a separate license file detailing the licenses of all included
# files.

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TEMP}
  VIASH_TEMP=${VIASH_TEMP:-/tmp}
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
# ViashFindTargetDir: return the path of the '.build.yaml' file, following symlinks
# usage   : ViashFindTargetDir 'ScriptPath'
# $1      : The location from where to start the upward search
# returns : The absolute path of the '.build.yaml' file
function ViashFindTargetDir {
  SOURCE="$1"
  while [[ "$SOURCE" != "" && ! -e "$SOURCE/.build.yaml" ]]; do
    SOURCE=${SOURCE%/*}
  done
  echo $SOURCE
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    >&2 echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency "$@"
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert "$@"
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical "$@"
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error "$@"
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning "$@"
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice "$@"
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info "$@"
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug "$@"
}

# find source folder of this component
VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# find the root of the built components & dependencies
VIASH_TARGET_DIR=`ViashFindTargetDir $VIASH_META_RESOURCES_DIR`

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="lgc_ensemble_train"
VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_FUNCTIONALITY_NAME"
VIASH_META_CONFIG="$VIASH_META_RESOURCES_DIR/.config.vsh.yaml"
VIASH_META_TEMP_DIR="$VIASH_TEMP"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "lgc_ensemble_train 1.0.0"
  echo ""
  echo "Arguments:"
  echo "    --train_data_aug_dir"
  echo "        type: file, required parameter, file must exist"
  echo ""
  echo "    --scheme"
  echo "        type: string, required parameter"
  echo "        choices: [ initial, light, heavy ]"
  echo "        The scheme to use for training."
  echo ""
  echo "    --model"
  echo "        type: string, required parameter"
  echo "        choices: [ LSTM, GRU, Conv ]"
  echo "        The name of the model to train."
  echo ""
  echo "    --fold"
  echo "        type: integer, required parameter"
  echo "        The fold to train."
  echo ""
  echo "    --model_file"
  echo "        type: file, required parameter, output, file must exist"
  echo "        example: model.pt"
  echo ""
  echo "    --log_file"
  echo "        type: file, required parameter, output, file must exist"
  echo "        example: log.json"
}

# initialise array
VIASH_POSITIONAL_ARGS=''
VIASH_MODE='run'

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "lgc_ensemble_train 1.0.0"
            exit
            ;;
        --train_data_aug_dir)
            [ -n "$VIASH_PAR_TRAIN_DATA_AUG_DIR" ] && ViashError Bad arguments for option \'--train_data_aug_dir\': \'$VIASH_PAR_TRAIN_DATA_AUG_DIR\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_TRAIN_DATA_AUG_DIR="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --train_data_aug_dir. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --train_data_aug_dir=*)
            [ -n "$VIASH_PAR_TRAIN_DATA_AUG_DIR" ] && ViashError Bad arguments for option \'--train_data_aug_dir=*\': \'$VIASH_PAR_TRAIN_DATA_AUG_DIR\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_TRAIN_DATA_AUG_DIR=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --scheme)
            [ -n "$VIASH_PAR_SCHEME" ] && ViashError Bad arguments for option \'--scheme\': \'$VIASH_PAR_SCHEME\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SCHEME="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --scheme. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --scheme=*)
            [ -n "$VIASH_PAR_SCHEME" ] && ViashError Bad arguments for option \'--scheme=*\': \'$VIASH_PAR_SCHEME\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SCHEME=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --model)
            [ -n "$VIASH_PAR_MODEL" ] && ViashError Bad arguments for option \'--model\': \'$VIASH_PAR_MODEL\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MODEL="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --model. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --model=*)
            [ -n "$VIASH_PAR_MODEL" ] && ViashError Bad arguments for option \'--model=*\': \'$VIASH_PAR_MODEL\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MODEL=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --fold)
            [ -n "$VIASH_PAR_FOLD" ] && ViashError Bad arguments for option \'--fold\': \'$VIASH_PAR_FOLD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_FOLD="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --fold. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --fold=*)
            [ -n "$VIASH_PAR_FOLD" ] && ViashError Bad arguments for option \'--fold=*\': \'$VIASH_PAR_FOLD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_FOLD=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --model_file)
            [ -n "$VIASH_PAR_MODEL_FILE" ] && ViashError Bad arguments for option \'--model_file\': \'$VIASH_PAR_MODEL_FILE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MODEL_FILE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --model_file. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --model_file=*)
            [ -n "$VIASH_PAR_MODEL_FILE" ] && ViashError Bad arguments for option \'--model_file=*\': \'$VIASH_PAR_MODEL_FILE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MODEL_FILE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --log_file)
            [ -n "$VIASH_PAR_LOG_FILE" ] && ViashError Bad arguments for option \'--log_file\': \'$VIASH_PAR_LOG_FILE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LOG_FILE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --log_file. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --log_file=*)
            [ -n "$VIASH_PAR_LOG_FILE" ] && ViashError Bad arguments for option \'--log_file=*\': \'$VIASH_PAR_LOG_FILE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LOG_FILE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---cpus)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---cpus. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---cpus=*)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus=*\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---memory)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---memory. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---memory=*)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory=*\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            [[ $1 == -* ]] && ViashWarning $1 looks like a parameter but is not a defined parameter and will instead be treated as a positional argument. Use "--help" to get more information on the parameters.
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS


# setting computational defaults

# helper function for parsing memory strings
function ViashMemoryAsBytes {
  local memory=`echo "$1" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]'`
  local memory_regex='^([0-9]+)([kmgtp]b?|b)$'
  if [[ $memory =~ $memory_regex ]]; then
    local number=${memory/[^0-9]*/}
    local symbol=${memory/*[0-9]/}
    
    case $symbol in
      b)      memory_b=$number ;;
      kb|k)   memory_b=$(( $number * 1024 )) ;;
      mb|m)   memory_b=$(( $number * 1024 * 1024 )) ;;
      gb|g)   memory_b=$(( $number * 1024 * 1024 * 1024 )) ;;
      tb|t)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 )) ;;
      pb|p)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 * 1024 )) ;;
    esac
    echo "$memory_b"
  fi
}
# compute memory in different units
if [ ! -z ${VIASH_META_MEMORY+x} ]; then
  VIASH_META_MEMORY_B=`ViashMemoryAsBytes $VIASH_META_MEMORY`
  # do not define other variables if memory_b is an empty string
  if [ ! -z "$VIASH_META_MEMORY_B" ]; then
    VIASH_META_MEMORY_KB=$(( ($VIASH_META_MEMORY_B+1023) / 1024 ))
    VIASH_META_MEMORY_MB=$(( ($VIASH_META_MEMORY_KB+1023) / 1024 ))
    VIASH_META_MEMORY_GB=$(( ($VIASH_META_MEMORY_MB+1023) / 1024 ))
    VIASH_META_MEMORY_TB=$(( ($VIASH_META_MEMORY_GB+1023) / 1024 ))
    VIASH_META_MEMORY_PB=$(( ($VIASH_META_MEMORY_TB+1023) / 1024 ))
  else
    # unset memory if string is empty
    unset $VIASH_META_MEMORY_B
  fi
fi
# unset nproc if string is empty
if [ -z "$VIASH_META_CPUS" ]; then
  unset $VIASH_META_CPUS
fi


# check whether required parameters exist
if [ -z ${VIASH_PAR_TRAIN_DATA_AUG_DIR+x} ]; then
  ViashError '--train_data_aug_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_SCHEME+x} ]; then
  ViashError '--scheme' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_MODEL+x} ]; then
  ViashError '--model' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_FOLD+x} ]; then
  ViashError '--fold' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_MODEL_FILE+x} ]; then
  ViashError '--model_file' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_LOG_FILE+x} ]; then
  ViashError '--log_file' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then
  ViashError 'functionality_name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_RESOURCES_DIR+x} ]; then
  ViashError 'resources_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_EXECUTABLE+x} ]; then
  ViashError 'executable' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_CONFIG+x} ]; then
  ViashError 'config' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_TEMP_DIR+x} ]; then
  ViashError 'temp_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi

# check whether required files exist
if [ ! -z "$VIASH_PAR_TRAIN_DATA_AUG_DIR" ] && [ ! -e "$VIASH_PAR_TRAIN_DATA_AUG_DIR" ]; then
  ViashError "Input file '$VIASH_PAR_TRAIN_DATA_AUG_DIR' does not exist."
  exit 1
fi

# check whether parameters values are of the right type
if [[ -n "$VIASH_PAR_FOLD" ]]; then
  if ! [[ "$VIASH_PAR_FOLD" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--fold' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_CPUS" ]]; then
  if ! [[ "$VIASH_META_CPUS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'cpus' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_B" ]]; then
  if ! [[ "$VIASH_META_MEMORY_B" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_b' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_KB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_KB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_kb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_MB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_MB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_mb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_GB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_GB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_gb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_TB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_TB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_tb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_PB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_PB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_pb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

# check whether value is belongs to a set of choices
if [ ! -z "$VIASH_PAR_SCHEME" ]; then
  VIASH_PAR_SCHEME_CHOICES=("initial:light:heavy")
  IFS=':'
  set -f
  if ! [[ ":${VIASH_PAR_SCHEME_CHOICES[*]}:" =~ ":$VIASH_PAR_SCHEME:" ]]; then
    ViashError '--scheme' specified value of \'$VIASH_PAR_SCHEME\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
    exit 1
  fi
  set +f
  unset IFS
fi

if [ ! -z "$VIASH_PAR_MODEL" ]; then
  VIASH_PAR_MODEL_CHOICES=("LSTM:GRU:Conv")
  IFS=':'
  set -f
  if ! [[ ":${VIASH_PAR_MODEL_CHOICES[*]}:" =~ ":$VIASH_PAR_MODEL:" ]]; then
    ViashError '--model' specified value of \'$VIASH_PAR_MODEL\' is not in the list of allowed values. Use "--help" to get more information on the parameters.
    exit 1
  fi
  set +f
  unset IFS
fi

# create parent directories of output files, if so desired
if [ ! -z "$VIASH_PAR_MODEL_FILE" ] && [ ! -d "$(dirname "$VIASH_PAR_MODEL_FILE")" ]; then
  mkdir -p "$(dirname "$VIASH_PAR_MODEL_FILE")"
fi
if [ ! -z "$VIASH_PAR_LOG_FILE" ] && [ ! -d "$(dirname "$VIASH_PAR_LOG_FILE")" ]; then
  mkdir -p "$(dirname "$VIASH_PAR_LOG_FILE")"
fi


# set dependency paths


ViashDebug "Running command: bash"
cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_META_TEMP_DIR/viash-run-lgc_ensemble_train-XXXXXX").py
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'
import sys
import torch
import json
import numpy as np
import pandas as pd
if torch.cuda.is_available():
    print("using device: cuda", flush=True)
else:
    print('using device: cpu', flush=True)

## VIASH START
# The following code has been auto-generated by Viash.
par = {
  'train_data_aug_dir': $( if [ ! -z ${VIASH_PAR_TRAIN_DATA_AUG_DIR+x} ]; then echo "r'${VIASH_PAR_TRAIN_DATA_AUG_DIR//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'scheme': $( if [ ! -z ${VIASH_PAR_SCHEME+x} ]; then echo "r'${VIASH_PAR_SCHEME//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'model': $( if [ ! -z ${VIASH_PAR_MODEL+x} ]; then echo "r'${VIASH_PAR_MODEL//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'fold': $( if [ ! -z ${VIASH_PAR_FOLD+x} ]; then echo "int(r'${VIASH_PAR_FOLD//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'model_file': $( if [ ! -z ${VIASH_PAR_MODEL_FILE+x} ]; then echo "r'${VIASH_PAR_MODEL_FILE//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'log_file': $( if [ ! -z ${VIASH_PAR_LOG_FILE+x} ]; then echo "r'${VIASH_PAR_LOG_FILE//\'/\'\"\'\"r\'}'"; else echo None; fi )
}
meta = {
  'functionality_name': $( if [ ! -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then echo "r'${VIASH_META_FUNCTIONALITY_NAME//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'resources_dir': $( if [ ! -z ${VIASH_META_RESOURCES_DIR+x} ]; then echo "r'${VIASH_META_RESOURCES_DIR//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'executable': $( if [ ! -z ${VIASH_META_EXECUTABLE+x} ]; then echo "r'${VIASH_META_EXECUTABLE//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'config': $( if [ ! -z ${VIASH_META_CONFIG+x} ]; then echo "r'${VIASH_META_CONFIG//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'temp_dir': $( if [ ! -z ${VIASH_META_TEMP_DIR+x} ]; then echo "r'${VIASH_META_TEMP_DIR//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'cpus': $( if [ ! -z ${VIASH_META_CPUS+x} ]; then echo "int(r'${VIASH_META_CPUS//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_b': $( if [ ! -z ${VIASH_META_MEMORY_B+x} ]; then echo "int(r'${VIASH_META_MEMORY_B//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_kb': $( if [ ! -z ${VIASH_META_MEMORY_KB+x} ]; then echo "int(r'${VIASH_META_MEMORY_KB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_mb': $( if [ ! -z ${VIASH_META_MEMORY_MB+x} ]; then echo "int(r'${VIASH_META_MEMORY_MB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_gb': $( if [ ! -z ${VIASH_META_MEMORY_GB+x} ]; then echo "int(r'${VIASH_META_MEMORY_GB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_tb': $( if [ ! -z ${VIASH_META_MEMORY_TB+x} ]; then echo "int(r'${VIASH_META_MEMORY_TB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_pb': $( if [ ! -z ${VIASH_META_MEMORY_PB+x} ]; then echo "int(r'${VIASH_META_MEMORY_PB//\'/\'\"\'\"r\'}')"; else echo None; fi )
}
dep = {
  
}

## VIASH END

print(f"par: {par}", flush=True)

# import helper functions
sys.path.append(meta['resources_dir'])

from models import Conv, LSTM, GRU
from helper_functions import train_function

###################################################################
# Interpretation from src/methods/lgc_ensemble/helper_functions.py

print("Load data...", flush=True)
# read kf_cv_initial from json
kn_cv_path = f'{par["train_data_aug_dir"]}/kf_cv_{par["scheme"]}.json'
with open(kn_cv_path, 'r') as file:
    kf_cv = json.load(file)

train_idx, val_idx = kf_cv[par["fold"]]

X = np.load(f'{par["train_data_aug_dir"]}/X_vec_{par["scheme"]}.npy')
y = np.load(f'{par["train_data_aug_dir"]}/y.npy')

cell_types_sm_names = pd.read_csv(f'{par["train_data_aug_dir"]}/cell_types_sm_names.csv')

with open(f'{par["train_data_aug_dir"]}/config.json', 'r') as file:
    config = json.load(file)

print("Prepare data...", flush=True)
x_train, x_val = X[train_idx], X[val_idx]
y_train, y_val = y[train_idx], y[val_idx]
info_data = {
    'train_cell_type': cell_types_sm_names.iloc[train_idx]['cell_type'].tolist(),
    'val_cell_type': cell_types_sm_names.iloc[val_idx]['cell_type'].tolist(),
    'train_sm_name': cell_types_sm_names.iloc[train_idx]['sm_name'].tolist(),
    'val_sm_name': cell_types_sm_names.iloc[val_idx]['sm_name'].tolist()
}

models = {
    "LSTM": LSTM,
    "GRU": GRU,
    "Conv": Conv
}
schemes = ['initial', 'light', 'heavy']
scheme_idx = schemes.index(par["scheme"])
clip_norm = config["CLIP_VALUES"][scheme_idx]

ModelClass = models[par["model"]]
model = ModelClass(par["scheme"], X.shape, y.shape)

print("Start training...", flush=True)
model, results = train_function(
    model,
    model.name,
    x_train,
    y_train,
    x_val,
    y_val,
    info_data,
    config=config,
    clip_norm=clip_norm
)
model.to('cpu')

print("Save model...", flush=True)
torch.save(model.state_dict(), par["model_file"])
with open(par["log_file"], 'w') as file:
    json.dump(results, file)
VIASHMAIN
python -B "\$tempscript" &
wait "\$!"

VIASHEOF


# check whether required files exist
if [ ! -z "$VIASH_PAR_MODEL_FILE" ] && [ ! -e "$VIASH_PAR_MODEL_FILE" ]; then
  ViashError "Output file '$VIASH_PAR_MODEL_FILE' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_LOG_FILE" ] && [ ! -e "$VIASH_PAR_LOG_FILE" ]; then
  ViashError "Output file '$VIASH_PAR_LOG_FILE' does not exist."
  exit 1
fi


exit 0
