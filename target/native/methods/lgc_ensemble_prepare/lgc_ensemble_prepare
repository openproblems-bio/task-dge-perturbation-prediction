#!/usr/bin/env bash

# lgc_ensemble_prepare build-main
# 
# This wrapper script is auto-generated by viash 0.8.6 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.
# 
# The component may contain files which fall under a different license. The
# authors of this component should specify the license in the header of such
# files, or include a separate license file detailing the licenses of all included
# files.

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TEMP}
  VIASH_TEMP=${VIASH_TEMP:-/tmp}
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
# ViashFindTargetDir: return the path of the '.build.yaml' file, following symlinks
# usage   : ViashFindTargetDir 'ScriptPath'
# $1      : The location from where to start the upward search
# returns : The absolute path of the '.build.yaml' file
function ViashFindTargetDir {
  SOURCE="$1"
  while [[ "$SOURCE" != "" && ! -e "$SOURCE/.build.yaml" ]]; do
    SOURCE=${SOURCE%/*}
  done
  echo $SOURCE
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    >&2 echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency "$@"
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert "$@"
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical "$@"
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error "$@"
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning "$@"
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice "$@"
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info "$@"
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug "$@"
}

# find source folder of this component
VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# find the root of the built components & dependencies
VIASH_TARGET_DIR=`ViashFindTargetDir $VIASH_META_RESOURCES_DIR`

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="lgc_ensemble_prepare"
VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_FUNCTIONALITY_NAME"
VIASH_META_CONFIG="$VIASH_META_RESOURCES_DIR/.config.vsh.yaml"
VIASH_META_TEMP_DIR="$VIASH_TEMP"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "lgc_ensemble_prepare build-main"
  echo ""
  echo "Arguments:"
  echo "    --de_train_h5ad"
  echo "        type: file, file must exist"
  echo ""
  echo "    --id_map"
  echo "        type: file, required parameter, file must exist"
  echo ""
  echo "    --layer"
  echo "        type: string"
  echo "        default: clipped_sign_log10_pval"
  echo "        Which layer to use for prediction."
  echo ""
  echo "    --train_data_aug_dir"
  echo "        type: file, required parameter, output, file must exist"
  echo ""
  echo "    --epochs"
  echo "        type: integer"
  echo "        default: 250"
  echo "        Number of epochs to train."
  echo ""
  echo "    --kf_n_splits"
  echo "        type: integer"
  echo "        default: 5"
  echo "        Number of splits for KFold."
  echo ""
  echo "    --schemes"
  echo "        type: string, multiple values allowed"
  echo "        default: initial;light;heavy"
  echo ""
  echo "    --models"
  echo "        type: string, multiple values allowed"
  echo "        default: LSTM;GRU;Conv"
}

# initialise array
VIASH_POSITIONAL_ARGS=''
VIASH_MODE='run'

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "lgc_ensemble_prepare build-main"
            exit
            ;;
        --de_train_h5ad)
            [ -n "$VIASH_PAR_DE_TRAIN_H5AD" ] && ViashError Bad arguments for option \'--de_train_h5ad\': \'$VIASH_PAR_DE_TRAIN_H5AD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DE_TRAIN_H5AD="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --de_train_h5ad. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --de_train_h5ad=*)
            [ -n "$VIASH_PAR_DE_TRAIN_H5AD" ] && ViashError Bad arguments for option \'--de_train_h5ad=*\': \'$VIASH_PAR_DE_TRAIN_H5AD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DE_TRAIN_H5AD=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --id_map)
            [ -n "$VIASH_PAR_ID_MAP" ] && ViashError Bad arguments for option \'--id_map\': \'$VIASH_PAR_ID_MAP\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_ID_MAP="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --id_map. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --id_map=*)
            [ -n "$VIASH_PAR_ID_MAP" ] && ViashError Bad arguments for option \'--id_map=*\': \'$VIASH_PAR_ID_MAP\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_ID_MAP=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --layer)
            [ -n "$VIASH_PAR_LAYER" ] && ViashError Bad arguments for option \'--layer\': \'$VIASH_PAR_LAYER\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LAYER="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --layer. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --layer=*)
            [ -n "$VIASH_PAR_LAYER" ] && ViashError Bad arguments for option \'--layer=*\': \'$VIASH_PAR_LAYER\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LAYER=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --train_data_aug_dir)
            [ -n "$VIASH_PAR_TRAIN_DATA_AUG_DIR" ] && ViashError Bad arguments for option \'--train_data_aug_dir\': \'$VIASH_PAR_TRAIN_DATA_AUG_DIR\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_TRAIN_DATA_AUG_DIR="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --train_data_aug_dir. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --train_data_aug_dir=*)
            [ -n "$VIASH_PAR_TRAIN_DATA_AUG_DIR" ] && ViashError Bad arguments for option \'--train_data_aug_dir=*\': \'$VIASH_PAR_TRAIN_DATA_AUG_DIR\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_TRAIN_DATA_AUG_DIR=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --epochs)
            [ -n "$VIASH_PAR_EPOCHS" ] && ViashError Bad arguments for option \'--epochs\': \'$VIASH_PAR_EPOCHS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_EPOCHS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --epochs. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --epochs=*)
            [ -n "$VIASH_PAR_EPOCHS" ] && ViashError Bad arguments for option \'--epochs=*\': \'$VIASH_PAR_EPOCHS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_EPOCHS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --kf_n_splits)
            [ -n "$VIASH_PAR_KF_N_SPLITS" ] && ViashError Bad arguments for option \'--kf_n_splits\': \'$VIASH_PAR_KF_N_SPLITS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_KF_N_SPLITS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --kf_n_splits. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --kf_n_splits=*)
            [ -n "$VIASH_PAR_KF_N_SPLITS" ] && ViashError Bad arguments for option \'--kf_n_splits=*\': \'$VIASH_PAR_KF_N_SPLITS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_KF_N_SPLITS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --schemes)
            if [ -z "$VIASH_PAR_SCHEMES" ]; then
              VIASH_PAR_SCHEMES="$2"
            else
              VIASH_PAR_SCHEMES="$VIASH_PAR_SCHEMES;""$2"
            fi
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --schemes. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --schemes=*)
            if [ -z "$VIASH_PAR_SCHEMES" ]; then
              VIASH_PAR_SCHEMES=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_SCHEMES="$VIASH_PAR_SCHEMES;"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --models)
            if [ -z "$VIASH_PAR_MODELS" ]; then
              VIASH_PAR_MODELS="$2"
            else
              VIASH_PAR_MODELS="$VIASH_PAR_MODELS;""$2"
            fi
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --models. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --models=*)
            if [ -z "$VIASH_PAR_MODELS" ]; then
              VIASH_PAR_MODELS=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_MODELS="$VIASH_PAR_MODELS;"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        ---cpus)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---cpus. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---cpus=*)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus=*\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---memory)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---memory. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---memory=*)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory=*\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            [[ $1 == -* ]] && ViashWarning $1 looks like a parameter but is not a defined parameter and will instead be treated as a positional argument. Use "--help" to get more information on the parameters.
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS


# setting computational defaults

# helper function for parsing memory strings
function ViashMemoryAsBytes {
  local memory=`echo "$1" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]'`
  local memory_regex='^([0-9]+)([kmgtp]b?|b)$'
  if [[ $memory =~ $memory_regex ]]; then
    local number=${memory/[^0-9]*/}
    local symbol=${memory/*[0-9]/}
    
    case $symbol in
      b)      memory_b=$number ;;
      kb|k)   memory_b=$(( $number * 1024 )) ;;
      mb|m)   memory_b=$(( $number * 1024 * 1024 )) ;;
      gb|g)   memory_b=$(( $number * 1024 * 1024 * 1024 )) ;;
      tb|t)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 )) ;;
      pb|p)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 * 1024 )) ;;
    esac
    echo "$memory_b"
  fi
}
# compute memory in different units
if [ ! -z ${VIASH_META_MEMORY+x} ]; then
  VIASH_META_MEMORY_B=`ViashMemoryAsBytes $VIASH_META_MEMORY`
  # do not define other variables if memory_b is an empty string
  if [ ! -z "$VIASH_META_MEMORY_B" ]; then
    VIASH_META_MEMORY_KB=$(( ($VIASH_META_MEMORY_B+1023) / 1024 ))
    VIASH_META_MEMORY_MB=$(( ($VIASH_META_MEMORY_KB+1023) / 1024 ))
    VIASH_META_MEMORY_GB=$(( ($VIASH_META_MEMORY_MB+1023) / 1024 ))
    VIASH_META_MEMORY_TB=$(( ($VIASH_META_MEMORY_GB+1023) / 1024 ))
    VIASH_META_MEMORY_PB=$(( ($VIASH_META_MEMORY_TB+1023) / 1024 ))
  else
    # unset memory if string is empty
    unset $VIASH_META_MEMORY_B
  fi
fi
# unset nproc if string is empty
if [ -z "$VIASH_META_CPUS" ]; then
  unset $VIASH_META_CPUS
fi


# check whether required parameters exist
if [ -z ${VIASH_PAR_ID_MAP+x} ]; then
  ViashError '--id_map' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_TRAIN_DATA_AUG_DIR+x} ]; then
  ViashError '--train_data_aug_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then
  ViashError 'functionality_name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_RESOURCES_DIR+x} ]; then
  ViashError 'resources_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_EXECUTABLE+x} ]; then
  ViashError 'executable' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_CONFIG+x} ]; then
  ViashError 'config' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_TEMP_DIR+x} ]; then
  ViashError 'temp_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi

# filling in defaults
if [ -z ${VIASH_PAR_LAYER+x} ]; then
  VIASH_PAR_LAYER="clipped_sign_log10_pval"
fi
if [ -z ${VIASH_PAR_EPOCHS+x} ]; then
  VIASH_PAR_EPOCHS="250"
fi
if [ -z ${VIASH_PAR_KF_N_SPLITS+x} ]; then
  VIASH_PAR_KF_N_SPLITS="5"
fi
if [ -z ${VIASH_PAR_SCHEMES+x} ]; then
  VIASH_PAR_SCHEMES="initial;light;heavy"
fi
if [ -z ${VIASH_PAR_MODELS+x} ]; then
  VIASH_PAR_MODELS="LSTM;GRU;Conv"
fi

# check whether required files exist
if [ ! -z "$VIASH_PAR_DE_TRAIN_H5AD" ] && [ ! -e "$VIASH_PAR_DE_TRAIN_H5AD" ]; then
  ViashError "Input file '$VIASH_PAR_DE_TRAIN_H5AD' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_ID_MAP" ] && [ ! -e "$VIASH_PAR_ID_MAP" ]; then
  ViashError "Input file '$VIASH_PAR_ID_MAP' does not exist."
  exit 1
fi

# check whether parameters values are of the right type
if [[ -n "$VIASH_PAR_EPOCHS" ]]; then
  if ! [[ "$VIASH_PAR_EPOCHS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--epochs' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_KF_N_SPLITS" ]]; then
  if ! [[ "$VIASH_PAR_KF_N_SPLITS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--kf_n_splits' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_CPUS" ]]; then
  if ! [[ "$VIASH_META_CPUS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'cpus' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_B" ]]; then
  if ! [[ "$VIASH_META_MEMORY_B" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_b' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_KB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_KB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_kb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_MB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_MB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_mb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_GB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_GB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_gb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_TB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_TB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_tb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_PB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_PB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_pb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

# create parent directories of output files, if so desired
if [ ! -z "$VIASH_PAR_TRAIN_DATA_AUG_DIR" ] && [ ! -d "$(dirname "$VIASH_PAR_TRAIN_DATA_AUG_DIR")" ]; then
  mkdir -p "$(dirname "$VIASH_PAR_TRAIN_DATA_AUG_DIR")"
fi


# set dependency paths


ViashDebug "Running command: bash"
cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_META_TEMP_DIR/viash-run-lgc_ensemble_prepare-XXXXXX").py
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'
import os
import pandas as pd
import anndata as ad
import numpy as np
import sys
import torch
from sklearn.model_selection import KFold as KF
import json
if torch.cuda.is_available():
    print("using device: cuda", flush=True)
else:
    print('using device: cpu', flush=True)

## VIASH START
# The following code has been auto-generated by Viash.
par = {
  'de_train_h5ad': $( if [ ! -z ${VIASH_PAR_DE_TRAIN_H5AD+x} ]; then echo "r'${VIASH_PAR_DE_TRAIN_H5AD//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'id_map': $( if [ ! -z ${VIASH_PAR_ID_MAP+x} ]; then echo "r'${VIASH_PAR_ID_MAP//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'layer': $( if [ ! -z ${VIASH_PAR_LAYER+x} ]; then echo "r'${VIASH_PAR_LAYER//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'train_data_aug_dir': $( if [ ! -z ${VIASH_PAR_TRAIN_DATA_AUG_DIR+x} ]; then echo "r'${VIASH_PAR_TRAIN_DATA_AUG_DIR//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'epochs': $( if [ ! -z ${VIASH_PAR_EPOCHS+x} ]; then echo "int(r'${VIASH_PAR_EPOCHS//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'kf_n_splits': $( if [ ! -z ${VIASH_PAR_KF_N_SPLITS+x} ]; then echo "int(r'${VIASH_PAR_KF_N_SPLITS//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'schemes': $( if [ ! -z ${VIASH_PAR_SCHEMES+x} ]; then echo "r'${VIASH_PAR_SCHEMES//\'/\'\"\'\"r\'}'.split(';')"; else echo None; fi ),
  'models': $( if [ ! -z ${VIASH_PAR_MODELS+x} ]; then echo "r'${VIASH_PAR_MODELS//\'/\'\"\'\"r\'}'.split(';')"; else echo None; fi )
}
meta = {
  'functionality_name': $( if [ ! -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then echo "r'${VIASH_META_FUNCTIONALITY_NAME//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'resources_dir': $( if [ ! -z ${VIASH_META_RESOURCES_DIR+x} ]; then echo "r'${VIASH_META_RESOURCES_DIR//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'executable': $( if [ ! -z ${VIASH_META_EXECUTABLE+x} ]; then echo "r'${VIASH_META_EXECUTABLE//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'config': $( if [ ! -z ${VIASH_META_CONFIG+x} ]; then echo "r'${VIASH_META_CONFIG//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'temp_dir': $( if [ ! -z ${VIASH_META_TEMP_DIR+x} ]; then echo "r'${VIASH_META_TEMP_DIR//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'cpus': $( if [ ! -z ${VIASH_META_CPUS+x} ]; then echo "int(r'${VIASH_META_CPUS//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_b': $( if [ ! -z ${VIASH_META_MEMORY_B+x} ]; then echo "int(r'${VIASH_META_MEMORY_B//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_kb': $( if [ ! -z ${VIASH_META_MEMORY_KB+x} ]; then echo "int(r'${VIASH_META_MEMORY_KB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_mb': $( if [ ! -z ${VIASH_META_MEMORY_MB+x} ]; then echo "int(r'${VIASH_META_MEMORY_MB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_gb': $( if [ ! -z ${VIASH_META_MEMORY_GB+x} ]; then echo "int(r'${VIASH_META_MEMORY_GB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_tb': $( if [ ! -z ${VIASH_META_MEMORY_TB+x} ]; then echo "int(r'${VIASH_META_MEMORY_TB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_pb': $( if [ ! -z ${VIASH_META_MEMORY_PB+x} ]; then echo "int(r'${VIASH_META_MEMORY_PB//\'/\'\"\'\"r\'}')"; else echo None; fi )
}
dep = {
  
}

## VIASH END

# import helper functions
sys.path.append(meta['resources_dir'])


from helper_functions import seed_everything, one_hot_encode, save_ChemBERTa_features
from anndata_to_dataframe import anndata_to_dataframe
from helper_functions import combine_features


###################################################################
# interpreted from src/methods/lgc_ensemble/prepare_data.py
# prepare data
seed_everything()

if not os.path.exists(par["train_data_aug_dir"]):
    os.makedirs(par["train_data_aug_dir"], exist_ok=True)

## Read data
print("\\nPreparing data...", flush=True)
de_train_h5ad = ad.read_h5ad(par["de_train_h5ad"])
de_train = anndata_to_dataframe(de_train_h5ad, par["layer"])
de_train = de_train.drop(columns=['split'])
id_map = pd.read_csv(par["id_map"])

gene_names = list(de_train_h5ad.var_names)

print("Create data augmentation", flush=True)
de_cell_type = de_train.iloc[:, [0] + list(range(5, de_train.shape[1]))]
de_sm_name = de_train.iloc[:, [1] + list(range(5, de_train.shape[1]))]
mean_cell_type = de_cell_type.groupby('cell_type').mean().reset_index()
mean_sm_name = de_sm_name.groupby('sm_name').mean().reset_index()
std_cell_type = de_cell_type.groupby('cell_type').std().reset_index()
std_sm_name = de_sm_name.groupby('sm_name').std().reset_index()
std_sm_name = std_sm_name.fillna(0)
cell_types = de_cell_type.groupby('cell_type').quantile(0.1).reset_index()['cell_type'] # This is just to get cell types in the right order for the next line
quantiles_cell_type = pd.concat(
    [pd.DataFrame(cell_types)] +
    [
        de_cell_type.groupby('cell_type')[col].quantile([0.25, 0.50, 0.75], interpolation='linear').unstack().reset_index(drop=True)
        for col in list(de_train.columns)[5:]
    ],
    axis=1
)

print("Save data augmentation features", flush=True)
mean_cell_type.to_csv(f'{par["train_data_aug_dir"]}/mean_cell_type.csv', index=False)
std_cell_type.to_csv(f'{par["train_data_aug_dir"]}/std_cell_type.csv', index=False)
mean_sm_name.to_csv(f'{par["train_data_aug_dir"]}/mean_sm_name.csv', index=False)
std_sm_name.to_csv(f'{par["train_data_aug_dir"]}/std_sm_name.csv', index=False)
quantiles_cell_type.to_csv(f'{par["train_data_aug_dir"]}/quantiles_cell_type.csv', index=False)
with open(f'{par["train_data_aug_dir"]}/gene_names.json', 'w') as f:
    json.dump(gene_names, f)

print("Create one hot encoding features", flush=True)
one_hot_train, _ = one_hot_encode(de_train[["cell_type", "sm_name"]], id_map[["cell_type", "sm_name"]], out_dir=par["train_data_aug_dir"])
one_hot_train = pd.DataFrame(one_hot_train)

print("Prepare ChemBERTa features", flush=True)
train_chem_feat, train_chem_feat_mean = save_ChemBERTa_features(de_train["SMILES"].tolist(), out_dir=par["train_data_aug_dir"], on_train_data=True)
sm_name2smiles = {smname:smiles for smname, smiles in zip(de_train['sm_name'], de_train['SMILES'])}
test_smiles = list(map(sm_name2smiles.get, id_map['sm_name'].values))
_, _ = save_ChemBERTa_features(test_smiles, out_dir=par["train_data_aug_dir"], on_train_data=False)

###################################################################
# interpreted from src/methods/lgc_ensemble/train.py

## Prepare cross-validation
cell_types_sm_names = de_train[['cell_type', 'sm_name']]
cell_types_sm_names.to_csv(f'{par["train_data_aug_dir"]}/cell_types_sm_names.csv', index=False)

print("Store Xs and y", flush=True)
X_vec = combine_features(
    [mean_cell_type, std_cell_type, mean_sm_name, std_sm_name],
    [train_chem_feat, train_chem_feat_mean],
    de_train,
    one_hot_train
)
np.save(f'{par["train_data_aug_dir"]}/X_vec_initial.npy', X_vec)
X_vec_light = combine_features(
    [mean_cell_type, mean_sm_name],
    [train_chem_feat, train_chem_feat_mean],
    de_train,
    one_hot_train
)
np.save(f'{par["train_data_aug_dir"]}/X_vec_light.npy', X_vec_light)
X_vec_heavy = combine_features(
    [quantiles_cell_type, mean_cell_type, mean_sm_name],
    [train_chem_feat,train_chem_feat_mean],
    de_train,
    one_hot_train,
    quantiles_cell_type
)
np.save(f'{par["train_data_aug_dir"]}/X_vec_heavy.npy', X_vec_heavy)

ylist = ['cell_type','sm_name','sm_lincs_id','SMILES','control']
y = de_train.drop(columns=ylist)
np.save(f'{par["train_data_aug_dir"]}/y.npy', y.values)

print("Store config and shapes", flush=True)
config = {
    "LEARNING_RATES": [0.001, 0.001, 0.0003],
    "CLIP_VALUES": [5.0, 1.0, 1.0],
    "EPOCHS": par["epochs"],
    "KF_N_SPLITS": par["kf_n_splits"],
    "SCHEMES": par["schemes"],
    "MODELS": par["models"],
    "DATASET_ID": de_train_h5ad.uns["dataset_id"],
}
with open(f'{par["train_data_aug_dir"]}/config.json', 'w') as file:
    json.dump(config, file)

shapes = {
    "xshapes": {
        'initial': X_vec.shape,
        'light': X_vec_light.shape,
        'heavy': X_vec_heavy.shape
    },
    "yshape": y.shape
}
with open(f'{par["train_data_aug_dir"]}/shapes.json', 'w') as file:
    json.dump(shapes, file)

print("Store cross-validation indices", flush=True)
kf_cv = KF(n_splits=config["KF_N_SPLITS"], shuffle=True, random_state=42)

def get_kv_index(X, kf):
    return [
        (
            tr.astype(int).tolist(),
            va.astype(int).tolist()
        )
        for tr, va in kf.split(X)
    ]

kf_cv_initial = get_kv_index(X_vec, kf_cv)
json.dump(kf_cv_initial, open(f'{par["train_data_aug_dir"]}/kf_cv_initial.json', 'w'))

kf_cv_light =   get_kv_index(X_vec_light, kf_cv)
json.dump(kf_cv_light, open(f'{par["train_data_aug_dir"]}/kf_cv_light.json', 'w'))

kf_cv_heavy = get_kv_index(X_vec_heavy, kf_cv)
json.dump(kf_cv_heavy, open(f'{par["train_data_aug_dir"]}/kf_cv_heavy.json', 'w'))

print("### Done.")
VIASHMAIN
python -B "\$tempscript" &
wait "\$!"

VIASHEOF


# check whether required files exist
if [ ! -z "$VIASH_PAR_TRAIN_DATA_AUG_DIR" ] && [ ! -e "$VIASH_PAR_TRAIN_DATA_AUG_DIR" ]; then
  ViashError "Output file '$VIASH_PAR_TRAIN_DATA_AUG_DIR' does not exist."
  exit 1
fi


exit 0
